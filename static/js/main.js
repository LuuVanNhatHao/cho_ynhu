// Application State Management
const AppState = {
    dataLoaded: false,
    currentSection: 'dashboard',
    analysisResults: {},
    chartInstances: {},
    recommendations: []
};

// Utility Functions
const Utils = {
    showLoading: (show = true) => {
        document.getElementById('loadingContainer').style.display = show ? 'flex' : 'none';
    },

    showAutoLoadingStatus: (status, message) => {
        const statusElement = document.getElementById('autoLoadingStatus');
        const statusIndicator = statusElement.querySelector('.status-indicator');
        const statusText = document.getElementById('statusText');

        statusElement.style.display = 'flex';
        statusText.textContent = message;

        // Update indicator class
        statusIndicator.className = 'status-indicator ' + status;

        // Auto-hide after 5 seconds for success/error
        if (status === 'success' || status === 'error') {
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 5000);
        }
    },

    showAlert: (message, type = 'info', duration = 5000) => {
        const alertContainer = document.getElementById('alertContainer');
        const alertId = 'alert_' + Date.now();

        const alertHtml = `
            <div id="${alertId}" class="alert-glass alert-${type} animate__animated animate__slideInDown">
                <div class="d-flex align-items-center">
                    <i class="fas fa-${Utils.getAlertIcon(type)} me-3"></i>
                    <div>${message}</div>
                    <button class="btn btn-sm btn-glass ms-auto" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        `;

        alertContainer.insertAdjacentHTML('beforeend', alertHtml);

        if (duration > 0) {
            setTimeout(() => {
                const alertElement = document.getElementById(alertId);
                if (alertElement) {
                    alertElement.classList.add('animate__fadeOutUp');
                    setTimeout(() => alertElement.remove(), 500);
                }
            }, duration);
        }
    },

    getAlertIcon: (type) => {
        const icons = {
            'success': 'check-circle',
            'error': 'exclamation-triangle',
            'warning': 'exclamation-circle',
            'info': 'info-circle'
        };
        return icons[type] || 'info-circle';
    },

    formatNumber: (num) => {
        return new Intl.NumberFormat('vi-VN').format(num);
    },

    animateValue: (element, start, end, duration = 1000) => {
        const range = end - start;
        let startTime;

        const step = (timestamp) => {
            if (!startTime) startTime = timestamp;
            const progress = Math.min((timestamp - startTime) / duration, 1);
            const value = Math.floor(progress * range + start);
            element.textContent = Utils.formatNumber(value);

            if (progress < 1) {
                requestAnimationFrame(step);
            }
        };

        requestAnimationFrame(step);
    }
};

// Navigation Management
const Navigation = {
    init: () => {
        // Sidebar toggle
        document.getElementById('sidebarToggle').addEventListener('click', () => {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');

            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
        });

        // Navigation items
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const section = e.currentTarget.dataset.section;
                Navigation.switchSection(section);
            });
        });
    },

    switchSection: (section) => {
        // Update active nav item
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        document.querySelector(`[data-section="${section}"]`).classList.add('active');

        // Hide all sections
        document.querySelectorAll('.content-section').forEach(sec => {
            sec.style.display = 'none';
        });

        // Show selected section
        document.getElementById(`${section}-section`).style.display = 'block';

        AppState.currentSection = section;

        // Load section-specific content if needed
        Navigation.loadSectionContent(section);
    },

    loadSectionContent: (section) => {
        switch(section) {
            case 'visualizations':
                if (AppState.analysisResults.visualizations) {
                    Visualizations.displayAll();
                }
                break;
            case 'ml-analysis':
                if (AppState.analysisResults.mlAnalysis) {
                    MLAnalysis.display();
                }
                break;
            case 'clustering':
                if (AppState.analysisResults.clustering) {
                    Clustering.display();
                }
                break;
            case 'statistical-tests':
                if (AppState.analysisResults.statisticalTests) {
                    StatisticalTests.display();
                }
                break;
            case 'recommendations':
                if (AppState.recommendations.length > 0) {
                    Recommendations.display();
                }
                break;
        }
    }
};

// Data Management
const DataManager = {
    autoLoadData: async () => {
        Utils.showAutoLoadingStatus('loading', 'ƒêang t·ª± ƒë·ªông t·∫£i d·ªØ li·ªáu...');

        try {
            const response = await fetch('/api/initial_load');
            const data = await response.json();

            if (data.status === 'success') {
                AppState.dataLoaded = true;

                // Update quick stats
                DataManager.updateQuickStats(data.basic_stats);

                // Display data overview
                DataManager.displayDataOverview(data);

                // Display initial plots if available
                if (data.initial_plots) {
                    DataManager.displayInitialPlots(data.initial_plots);
                }

                Utils.showAutoLoadingStatus('success', '‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª± ƒë·ªông!');
                Utils.showAlert('üéâ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch ngay.', 'success');

                return true;
            } else {
                Utils.showAutoLoadingStatus('error', '‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª± ƒë·ªông');
                Utils.showAlert(`‚ö†Ô∏è ${data.message}`, 'warning');
                return false;
            }
        } catch (error) {
            Utils.showAutoLoadingStatus('error', '‚ùå L·ªói k·∫øt n·ªëi server');
            Utils.showAlert(`‚ùå L·ªói k·∫øt n·ªëi: ${error.message}`, 'error');
            return false;
        }
    },

    reloadData: async () => {
        Utils.showLoading(true);

        try {
            const response = await fetch('/api/initial_load');
            const data = await response.json();

            if (data.status === 'success') {
                AppState.dataLoaded = true;
                Utils.showAlert(`‚úÖ ${data.message}`, 'success');

                // Update quick stats
                DataManager.updateQuickStats(data.basic_stats);

                // Show data overview
                DataManager.displayDataOverview(data);

                // Display initial plots
                if (data.initial_plots) {
                    DataManager.displayInitialPlots(data.initial_plots);
                }

                return true;
            } else {
                Utils.showAlert(`‚ùå ${data.message}`, 'error');
                return false;
            }
        } catch (error) {
            Utils.showAlert(`‚ùå L·ªói k·∫øt n·ªëi: ${error.message}`, 'error');
            return false;
        } finally {
            Utils.showLoading(false);
        }
    },

    updateQuickStats: (stats) => {
        // Animate stats values
        const totalRecords = document.getElementById('totalRecords');
        const totalColumns = document.getElementById('totalColumns');
        const missingValues = document.getElementById('missingValues');
        const memoryUsage = document.getElementById('memoryUsage');

        if (totalRecords) Utils.animateValue(totalRecords, 0, stats.total_records);
        if (totalColumns) Utils.animateValue(totalColumns, 0, stats.total_columns);
        if (missingValues) Utils.animateValue(missingValues, 0, stats.missing_values);
        if (memoryUsage) memoryUsage.textContent = stats.memory_usage;
    },

    displayDataOverview: (data) => {
        const container = document.getElementById('dataOverviewContent');
        if (!container) return;

        const overviewHtml = `
            <div class="row">
                <div class="col-md-6">
                    <h5 style="color: white;">C·∫•u tr√∫c d·ªØ li·ªáu</h5>
                    <div class="table-responsive">
                        <table class="table table-dark table-striped">
                            <thead>
                                <tr>
                                    <th>C·ªôt</th>
                                    <th>Ki·ªÉu d·ªØ li·ªáu</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.columns.map(col => `
                                    <tr>
                                        <td>${col}</td>
                                        <td><span class="badge bg-secondary">${DataManager.getColumnType(col)}</span></td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-6">
                    <h5 style="color: white;">M·∫´u d·ªØ li·ªáu</h5>
                    <div class="table-responsive">
                        <table class="table table-dark table-striped">
                            <thead>
                                <tr>
                                    ${data.columns.slice(0, 5).map(col => `<th>${col}</th>`).join('')}
                                </tr>
                            </thead>
                            <tbody>
                                ${data.sample_data.slice(0, 5).map(row => `
                                    <tr>
                                        ${data.columns.slice(0, 5).map(col => `
                                            <td>${DataManager.truncateText(row[col], 20)}</td>
                                        `).join('')}
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;

        container.innerHTML = overviewHtml;
    },

    displayInitialPlots: (plots) => {
        if (plots.dashboard_overview) {
            const container = document.getElementById('dashboardChart');
            const plotArea = document.getElementById('dashboardPlotArea');

            if (container && plotArea) {
                container.style.display = 'block';
                const plotData = JSON.parse(plots.dashboard_overview);
                Plotly.newPlot('dashboardPlotArea', plotData.data, plotData.layout, {responsive: true});
            }
        }
    },

    getColumnType: (column) => {
        const numericColumns = ['Age', 'Hours_Per_Week', 'Work_Life_Balance_Score', 'Social_Isolation_Score'];
        return numericColumns.includes(column) ? 'S·ªë' : 'VƒÉn b·∫£n';
    },

    truncateText: (text, maxLength) => {
        if (!text) return 'N/A';
        return text.toString().length > maxLength ?
            text.toString().substring(0, maxLength) + '...' :
            text.toString();
    }
};

// Data Analysis Module
const DataAnalysis = {
    startFullAnalysis: async () => {
        if (!AppState.dataLoaded) {
            Utils.showAlert('Vui l√≤ng ƒë·ª£i d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i', 'warning');
            return;
        }

        Utils.showLoading(true);
        Utils.showAlert('üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch to√†n di·ªán...', 'info');

        try {
            // Load all analyses in parallel
            const promises = [
                DataAnalysis.loadVisualizations(),
                DataAnalysis.loadMLAnalysis(),
                DataAnalysis.loadClustering(),
                DataAnalysis.loadStatisticalTests()
            ];

            await Promise.all(promises);

            Utils.showAlert('‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t! T·∫•t c·∫£ k·∫øt qu·∫£ ƒë√£ s·∫µn s√†ng.', 'success');

            // Auto-switch to ML analysis section
            Navigation.switchSection('ml-analysis');

        } catch (error) {
            Utils.showAlert(`‚ùå L·ªói ph√¢n t√≠ch: ${error.message}`, 'error');
        } finally {
            Utils.showLoading(false);
        }
    },

    loadVisualizations: async () => {
        try {
            const response = await fetch('/api/advanced_visualizations');
            const data = await response.json();

            if (data.status === 'success') {
                AppState.analysisResults.visualizations = data.plots;
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error loading visualizations:', error);
            return false;
        }
    },

    loadMLAnalysis: async () => {
        try {
            const response = await fetch('/api/advanced_analysis');
            const data = await response.json();

            if (data.status === 'success') {
                AppState.analysisResults.mlAnalysis = data;
                AppState.recommendations = data.recommendations || [];
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error loading ML analysis:', error);
            return false;
        }
    },

    loadClustering: async () => {
        try {
            const response = await fetch('/api/clustering_analysis');
            const data = await response.json();

            if (data.status === 'success') {
                AppState.analysisResults.clustering = data;
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error loading clustering:', error);
            return false;
        }
    },

    loadStatisticalTests: async () => {
        try {
            const response = await fetch('/api/statistical_tests');
            const data = await response.json();

            if (data.status === 'success') {
                AppState.analysisResults.statisticalTests = data.tests;
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error loading statistical tests:', error);
            return false;
        }
    }
};

// Visualizations Module
const Visualizations = {
    displayAll: () => {
        const plots = AppState.analysisResults.visualizations;
        if (!plots) return;

        // Display 3D Scatter
        if (plots.scatter_3d) {
            const plotData = JSON.parse(plots.scatter_3d);
            Plotly.newPlot('viz-3d-scatter', plotData.data, plotData.layout, {responsive: true});
        }

        // Display Heatmap
        if (plots.correlation_heatmap) {
            const plotData = JSON.parse(plots.correlation_heatmap);
            Plotly.newPlot('viz-heatmap', plotData.data, plotData.layout, {responsive: true});
        }

        // Display Sunburst
        if (plots.sunburst) {
            const plotData = JSON.parse(plots.sunburst);
            Plotly.newPlot('viz-sunburst', plotData.data, plotData.layout, {responsive: true});
        }

        // Display Violin
        if (plots.violin_arrangement) {
            const plotData = JSON.parse(plots.violin_arrangement);
            Plotly.newPlot('viz-violin', plotData.data, plotData.layout, {responsive: true});
        }
    }
};

// ML Analysis Module
const MLAnalysis = {
    display: () => {
        const data = AppState.analysisResults.mlAnalysis;
        if (!data) return;

        // Display model performance
        const perfContainer = document.getElementById('ml-models-performance');
        if (perfContainer) {
            perfContainer.innerHTML = MLAnalysis.renderModelsPerformance(data.models_performance, data.best_model);
        }

        // Display feature importance
        const featureContainer = document.getElementById('ml-feature-importance');
        if (featureContainer) {
            featureContainer.innerHTML = MLAnalysis.renderFeatureImportance(data.feature_importance);
        }

        // Display recommendations
        const recContainer = document.getElementById('ml-recommendations');
        if (recContainer && data.recommendations) {
            recContainer.innerHTML = MLAnalysis.renderRecommendations(data.recommendations);
        }
    },

    renderModelsPerformance: (models, bestModel) => {
        return `
            <h4 style="color: white;">Hi·ªáu su·∫•t c√°c m√¥ h√¨nh ML</h4>
            <div class="row">
                ${Object.entries(models).map(([name, metrics]) => `
                    <div class="col-md-4">
                        <div class="model-card ${name === bestModel ? 'best-model' : ''}">
                            <h5 style="color: white;">${name}</h5>
                            <div style="color: rgba(255,255,255,0.9);">
                                <p>ƒê·ªô ch√≠nh x√°c: <strong>${(metrics.accuracy * 100).toFixed(2)}%</strong></p>
                                <p>CV Mean: ${(metrics.cv_mean * 100).toFixed(2)}%</p>
                                <p>CV Std: ¬±${(metrics.cv_std * 100).toFixed(2)}%</p>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    },

    renderFeatureImportance: (importance) => {
        const firstModel = Object.keys(importance)[0];
        const features = importance[firstModel];

        const sortedFeatures = Object.entries(features)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10);

        const html = `
            <h4 style="color: white;">T·∫ßm quan tr·ªçng c·ªßa c√°c y·∫øu t·ªë</h4>
            <div id="feature-importance-chart"></div>
        `;

        setTimeout(() => {
            const data = [{
                x: sortedFeatures.map(f => f[1]),
                y: sortedFeatures.map(f => f[0]),
                type: 'bar',
                orientation: 'h',
                marker: {
                    color: 'rgba(240, 147, 251, 0.8)',
                    line: {
                        color: 'rgba(240, 147, 251, 1)',
                        width: 2
                    }
                }
            }];

            const layout = {
                title: 'Top 10 Features',
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)',
                font: { color: 'white' },
                xaxis: { title: 'Importance Score' },
                margin: { l: 150 }
            };

            Plotly.newPlot('feature-importance-chart', data, layout, {responsive: true});
        }, 100);

        return html;
    },

    renderRecommendations: (recommendations) => {
        return `
            <h4 style="color: white;">Khuy·∫øn ngh·ªã d·ª±a tr√™n ph√¢n t√≠ch</h4>
            <div class="row">
                ${recommendations.map(rec => `
                    <div class="col-md-12">
                        <div class="recommendation-card priority-${rec.priority.toLowerCase()}">
                            <h5 style="color: white;">
                                <i class="fas fa-lightbulb"></i> ${rec.area}
                            </h5>
                            <p style="color: rgba(255,255,255,0.9);">${rec.recommendation}</p>
                            <small style="color: rgba(255,255,255,0.7);">
                                <i class="fas fa-chart-line"></i> T√°c ƒë·ªông d·ª± ki·∫øn: ${rec.expected_impact}
                            </small>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }
};

// Clustering Module
const Clustering = {
    display: () => {
        const data = AppState.analysisResults.clustering;
        if (!data) return;

        // Display clustering results
        const resultsContainer = document.getElementById('clustering-results');
        if (resultsContainer) {
            resultsContainer.innerHTML = Clustering.renderResults(data.clustering_results);
        }

        // Display visualization
        const vizContainer = document.getElementById('clustering-visualization');
        if (vizContainer && data.visualization) {
            const plotData = JSON.parse(data.visualization);
            Plotly.newPlot('clustering-visualization', plotData.data, plotData.layout, {responsive: true});
        }
    },

    renderResults: (results) => {
        return `
            <h4 style="color: white;">K·∫øt qu·∫£ ph√¢n nh√≥m</h4>
            <p style="color: rgba(255,255,255,0.9);">
                S·ªë nh√≥m t·ªëi ∆∞u: <strong>${results.optimal_k}</strong>
            </p>
            <div class="row">
                ${Object.entries(results.cluster_summary).map(([cluster, summary]) => `
                    <div class="col-md-4">
                        <div class="glass-container p-3">
                            <h5 style="color: white;">${cluster.replace('_', ' ')}</h5>
                            <p style="color: rgba(255,255,255,0.8);">
                                K√≠ch th∆∞·ªõc: ${summary.size} ng∆∞·ªùi<br>
                                Tu·ªïi TB: ${summary.avg_age.toFixed(1)}<br>
                                Gi·ªù l√†m/tu·∫ßn: ${summary.avg_hours.toFixed(1)}<br>
                                WLB Score: ${summary.avg_work_life_balance.toFixed(2)}<br>
                                Isolation Score: ${summary.avg_isolation.toFixed(2)}
                            </p>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }
};

// Statistical Tests Module
const StatisticalTests = {
    display: () => {
        const tests = AppState.analysisResults.statisticalTests;
        if (!tests) return;

        const container = document.getElementById('statistical-tests-results');
        if (container) {
            container.innerHTML = StatisticalTests.renderTests(tests);
        }
    },

    renderTests: (tests) => {
        return `
            <h4 style="color: white;">K·∫øt qu·∫£ ki·ªÉm ƒë·ªãnh th·ªëng k√™</h4>
            <div class="row">
                ${Object.entries(tests).map(([key, test]) => `
                    <div class="col-md-12 mb-3">
                        <div class="glass-container p-3">
                            <h5 style="color: white;">${test.test_name}</h5>
                            <div style="color: rgba(255,255,255,0.9);">
                                <p>Th·ªëng k√™: ${test.statistic.toFixed(4)}</p>
                                <p>P-value: ${test.p_value.toFixed(4)}</p>
                                <p class="mb-0">
                                    <strong>K·∫øt lu·∫≠n:</strong> 
                                    <span class="badge ${test.p_value < 0.05 ? 'bg-success' : 'bg-warning'}">
                                        ${test.interpretation}
                                    </span>
                                </p>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }
};

// Recommendations Module
const Recommendations = {
    display: () => {
        const recommendations = AppState.recommendations;
        if (!recommendations || recommendations.length === 0) {
            // Try to get from ML analysis
            if (AppState.analysisResults.mlAnalysis && AppState.analysisResults.mlAnalysis.recommendations) {
                recommendations.push(...AppState.analysisResults.mlAnalysis.recommendations);
            }
        }

        const container = document.getElementById('recommendations-content');
        if (container) {
            container.innerHTML = Recommendations.render(recommendations);
        }
    },

    render: (recommendations) => {
        if (!recommendations || recommendations.length === 0) {
            return '<p style="color: white;">Ch∆∞a c√≥ khuy·∫øn ngh·ªã. Vui l√≤ng ch·∫°y ph√¢n t√≠ch ML tr∆∞·ªõc.</p>';
        }

        return `
            <div class="row">
                ${recommendations.map((rec, index) => `
                    <div class="col-md-12 mb-3">
                        <div class="recommendation-card priority-${(rec.priority || 'medium').toLowerCase()}">
                            <div class="d-flex align-items-start">
                                <div class="me-3">
                                    <span class="badge bg-${Recommendations.getPriorityColor(rec.priority)}">
                                        ${rec.priority}
                                    </span>
                                </div>
                                <div class="flex-grow-1">
                                    <h5 style="color: white;">
                                        <i class="fas fa-${Recommendations.getAreaIcon(rec.area)}"></i> 
                                        ${rec.area}
                                    </h5>
                                    <p style="color: rgba(255,255,255,0.9);">${rec.recommendation}</p>
                                    <div class="mt-2">
                                        <small style="color: rgba(255,255,255,0.7);">
                                            <i class="fas fa-chart-line"></i> 
                                            T√°c ƒë·ªông d·ª± ki·∫øn: <strong>${rec.expected_impact}</strong>
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    },

    getPriorityColor: (priority) => {
        const colors = {
            'Cao': 'danger',
            'Trung b√¨nh': 'warning',
            'Th·∫•p': 'success'
        };
        return colors[priority] || 'secondary';
    },

    getAreaIcon: (area) => {
        const icons = {
            'C√¢n b·∫±ng c√¥ng vi·ªác-cu·ªôc s·ªëng': 'balance-scale',
            'T∆∞∆°ng t√°c x√£ h·ªôi': 'users',
            'Qu·∫£n l√Ω th·ªùi gian': 'clock'
        };
        return icons[area] || 'lightbulb';
    }
};

// Report Export Module
const ReportExporter = {
    exportReport: () => {
        const reportData = ReportExporter.generateReportData();
        const reportHtml = ReportExporter.generateReportHTML(reportData);
        ReportExporter.downloadReport(reportHtml);
    },

    generateReportData: () => {
        return {
            timestamp: new Date().toLocaleString('vi-VN'),
            dataLoaded: AppState.dataLoaded,
            analysisResults: AppState.analysisResults,
            recommendations: AppState.recommendations
        };
    },

    generateReportHTML: (data) => {
        return `
            <!DOCTYPE html>
            <html lang="vi">
            <head>
                <meta charset="UTF-8">
                <title>B√°o c√°o Ph√¢n t√≠ch S·ª©c kh·ªèe Tinh th·∫ßn</title>
                <style>
                    body { 
                        font-family: 'Segoe UI', sans-serif; 
                        margin: 40px;
                        line-height: 1.6;
                    }
                    .header { 
                        text-align: center; 
                        margin-bottom: 40px;
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        border-radius: 10px;
                    }
                    .section { 
                        margin: 30px 0;
                        padding: 20px;
                        border-left: 4px solid #667eea;
                        background: #f8f9fa;
                    }
                    h2 { color: #333; }
                    .metric { 
                        display: inline-block;
                        margin: 10px;
                        padding: 10px;
                        background: white;
                        border-radius: 5px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>B√°o c√°o Ph√¢n t√≠ch S·ª©c kh·ªèe Tinh th·∫ßn Ng∆∞·ªùi lao ƒë·ªông</h1>
                    <p>ƒê∆∞·ª£c t·∫°o v√†o: ${data.timestamp}</p>
                </div>
                
                <div class="section">
                    <h2>T√≥m t·∫Øt Executive</h2>
                    <p>B√°o c√°o n√†y cung c·∫•p ph√¢n t√≠ch to√†n di·ªán v·ªÅ c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe tinh th·∫ßn c·ªßa ng∆∞·ªùi lao ƒë·ªông, 
                    s·ª≠ d·ª•ng c√°c thu·∫≠t to√°n Machine Learning ti√™n ti·∫øn ƒë·ªÉ ƒë∆∞a ra nh·ªØng insights c√≥ gi√° tr·ªã.</p>
                </div>
                
                <div class="section">
                    <h2>K·∫øt qu·∫£ Machine Learning</h2>
                    ${data.analysisResults.mlAnalysis ? `
                        <p>M√¥ h√¨nh t·ªët nh·∫•t: <strong>${data.analysisResults.mlAnalysis.best_model}</strong></p>
                        <p>ƒê·ªô ch√≠nh x√°c: <strong>${(data.analysisResults.mlAnalysis.models_performance[data.analysisResults.mlAnalysis.best_model].accuracy * 100).toFixed(2)}%</strong></p>
                    ` : '<p>Ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch ML</p>'}
                </div>
                
                <div class="section">
                    <h2>Khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c</h2>
                    ${data.recommendations && data.recommendations.length > 0 ? 
                        data.recommendations.map(rec => `
                            <div style="margin-bottom: 15px;">
                                <h3>${rec.area}</h3>
                                <p>${rec.recommendation}</p>
                                <p><em>T√°c ƒë·ªông d·ª± ki·∫øn: ${rec.expected_impact}</em></p>
                            </div>
                        `).join('') : 
                        '<p>Ch∆∞a c√≥ khuy·∫øn ngh·ªã</p>'
                    }
                </div>
            </body>
            </html>
        `;
    },

    downloadReport: (htmlContent) => {
        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `mental_health_report_${new Date().getTime()}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);

        Utils.showAlert('‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng!', 'success');
    }
};

// Initialize application when DOM is ready
document.addEventListener('DOMContentLoaded', async () => {
    // Initialize navigation
    Navigation.init();

    // Auto-load data on page load
    await DataManager.autoLoadData();

    // Event listeners
    document.getElementById('reloadDataBtn').addEventListener('click', DataManager.reloadData);
    document.getElementById('startAnalysisBtn').addEventListener('click', DataAnalysis.startFullAnalysis);
    document.getElementById('exportReportBtn').addEventListener('click', ReportExporter.exportReport);

    // Feature cards click events
    document.querySelectorAll('.feature-card').forEach(card => {
        card.addEventListener('click', (e) => {
            const feature = e.currentTarget.dataset.feature;
            switch(feature) {
                case 'advanced-viz':
                    Navigation.switchSection('visualizations');
                    break;
                case 'ml-models':
                    Navigation.switchSection('ml-analysis');
                    break;
                case 'clustering':
                    Navigation.switchSection('clustering');
                    break;
            }
        });
    });
});